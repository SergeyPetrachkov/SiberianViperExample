//
//  CustomSplashPresenter.swift
//  SiberianViperExample
//
//  Created by Sergey Petrachkov on 05/05/2018.
//  Copyright (c) 2018 West Coast IT. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER

protocol CustomSplashPresenterInput: class, Startable {
  var view: UIViewController! { get set }
  var output: CustomSplashPresenterOutput? { get set }
  var router: CustomSplashRoutingLogic? { get set }
  var interactor: CustomSplashInteractorInput? { get set }
}
protocol CustomSplashPresenterOutput: class {
  func didChangeState(viewModel : CustomSplash.DataContext.ViewModel)
}

class CustomSplashPresenter: CustomSplashPresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output: CustomSplashPresenterOutput?
  var viewModel: CustomSplash.DataContext.ViewModel!
  var router: CustomSplashRoutingLogic?
  var interactor: CustomSplashInteractorInput?
  // MARK: - Initializers
  init() {
    self.viewModel = CustomSplash.DataContext.ViewModel()
  }
  deinit {
    print("CustomSplashPresenter deinit is called")
  }
  // MARK: - Presenter Input
  func start() {
    self.router?.showFeed(from: self.view)
  }
  
  func stop() {
    
  }
}
extension CustomSplashPresenter: CustomSplashInteractorOutput {
  // MARK: - Interactor output
  func didReceive(response: CustomSplash.DataContext.Response) {
  }
  func didFail(with error: Error) {
  }
}
