//
//  FeedPresenter.swift
//  SiberianViperExample
//
//  Created by Sergey Petrachkov on 05/05/2018.
//  Copyright (c) 2018 West Coast IT. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER

protocol FeedPresenterInput: Awaitable, Startable, CloseableModule {
  var view: UIViewController! { get set }
  var output: FeedPresenterOutput? { get set }
  var router: FeedRoutingLogic? { get set }
  var interactor: FeedInteractorInput? { get set }
  func refresh()
  func fetch()
}
protocol FeedPresenterOutput: AwaitableDelegate {
  func didChangeState(viewModel : Feed.DataContext.ViewModel)
}

class FeedPresenter: CollectionPresenter, FeedPresenterInput {
  // MARK: - Essentials
  weak var view: UIViewController!
  weak var output: FeedPresenterOutput?
  var viewModel: Feed.DataContext.ViewModel! {
    didSet {
      self.awaitableModel = self.viewModel
    }
  }
  var router: FeedRoutingLogic?
  var interactor: FeedInteractorInput?
  // MARK: - Initializers
  init(moduleIn: Feed.DataContext.ModuleIn) {
    super.init()
    self.viewModel = Feed.DataContext.ViewModel(moduleIn: moduleIn)
    self.awaitableModel = self.viewModel
    self.collectionModel = self.viewModel
  }
  deinit {
    print("FeedPresenter deinit is called")
  }
  // MARK: - Presenter Input
  func refresh() {
    _ = try? self.fetchItems(reset: true)
  }
  func fetch() {
    _ = try? self.fetchItems(reset: false)
  }
  // MARK: - Startable
  override func start() {
    super.start()
    self.awaitableDelegate = self.output
    _ = try? self.fetchItems(reset: true)
  }
  // MARK: - Base overrides
  @discardableResult override func fetchItems(reset: Bool) throws -> (skip: Int, take: Int) {
    do {
      let skipTake = try super.fetchItems(reset: reset)
      self.interactor?.requestItems(request: Feed.DataContext.Request(skip: skipTake.skip, take: skipTake.take))
      return skipTake
    } catch let error {
      throw error
    }
  }
}
extension FeedPresenter: FeedInteractorOutput {
  // MARK: - Interactor output
  func didReceive(response: Feed.DataContext.Response) {
    if response.originalRequest.paginationParams.skip == 0 {
      self.viewModel.items = []
    }
    response.items.enumerated().forEach({ (offset, _) in
      self.viewModel.changeSet.append(.new(IndexPath(row: self.viewModel.items.count + offset, section: 0)))
    })
    
    self.viewModel.items.append(contentsOf: response.items as [CollectionModel])
    self.output?.didChangeState(viewModel: self.viewModel)
    self.exitPendingState()
  }

  func didFail(with error: Error) {
    self.exitPendingState()
  }
}
