//
//
//  FeedInteractor.swift
//  SiberianViperExample
//
//  Created by Sergey Petrachkov on 05/05/2018.
//  Copyright (c) 2018 West Coast IT. All rights reserved.
//
//  This file was generated by the SergeyPetrachkov VIPER Xcode Templates so
//  you can apply VIPER architecture to your iOS projects
//

import UIKit
import SiberianVIPER
protocol FeedInteractorInput: class {
  init(feedService: FeedServiceProtocol, profileService: ProfileServiceProtocol?)
  var output: FeedInteractorOutput? { get set }
  func requestItems(request: Feed.DataContext.Request)
  func requestProfile()
}

protocol FeedInteractorOutput: class {
  func didReceive(response: Feed.DataContext.Response)
  func didReceive(profileResponse: Feed.DataContext.ProfileResponse)
  func didFail(with error: Error)
}

class FeedInteractor: FeedInteractorInput {
  let feedService: FeedServiceProtocol!
  let profileService: ProfileServiceProtocol?
  required init(feedService: FeedServiceProtocol, profileService: ProfileServiceProtocol?) {
    self.feedService = feedService
    self.profileService = profileService
  }

  weak var output: FeedInteractorOutput?
  // MARK: - Input
  func requestProfile() {
    self.profileService?.fetchProfile(success: { user in
      self.output?.didReceive(profileResponse: Feed.DataContext.ProfileResponse(profile: Profile(user: user)))
    },
                                      failure: { error in })
  }
  func requestItems(request: Feed.DataContext.Request) {
    self.feedService.getItems(request: request,
                          success: { items in
                            let models: [CollectionModel] = items.map({ model in
                              if model.mediaInfo != nil {
                                return MediaFeedItemModel(currentModel: model)
                              } else {
                                return FeedModel(currentModel: model)
                              }
                            })
                            self.output?.didReceive(response: Feed.DataContext.Response(originalRequest: request,
                                                                                        items: models))
    },
                          failure: { error in
                            self.output?.didFail(with: error)
    })
  }
}
